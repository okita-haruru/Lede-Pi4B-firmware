#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  push:
    branches:
      - main
  schedule:
    - cron: 0 16 * * *
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      cache:
        description: 'Enable cache'
        required: false
        default: 'true'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  PRE_FEEDS_SH: pre-feed.sh
  POST_FEEDS_SH: post-feed.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  DATA_DIR: data
  TZ: Asia/Shanghai
  RELEASE_TAG: R2S
  SERVERCHAN_SCKEY: false

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Gethering some information
      run: |
        echo "BUILD_TAG=$RELEASE_TAG\\-$(date +"%Y\\.%m\\.%d\\-%H%M%S")" >> $GITHUB_ENV

    - name: TG Message
      if: env.SERVERCHAN_SCKEY == 'true'
      run: |
        echo "正在编译新的固件 ${{ env.BUILD_TAG }},请耐心等待 😋💐" > tgmessage.txt
        echo "[Github Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> tgmessage.txt
        TG_SENDTXT=`cat tgmessage.txt`
        TG_RESULT=`curl -k -d chat_id=${{ secrets.TGID }} -d text="$TG_SENDTXT" -d parse_mode=MarkdownV2 "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage"`
        MESSAGE_ID=`echo "$TG_RESULT" | jq .result.message_id`
        echo "MESSAGE_ID=$MESSAGE_ID" >> $GITHUB_ENV

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install jq
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git config --global user.email "git@github.com"
        git config --global user.name "GitHub"
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      if: (github.event.inputs.cache == 'true' && github.event.inputs.cache != 'false') || !contains(github.event.action, 'cache')
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $PRE_FEEDS_SH
        cd openwrt
        $GITHUB_WORKSPACE/$PRE_FEEDS_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration & Execute custom post-feeds scripts
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        [ -e $DATA_DIR ] && mv $DATA_DIR openwrt/data
        chmod +x $POST_FEEDS_SH
        cd openwrt
        $GITHUB_WORKSPACE/$POST_FEEDS_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        patch -p1 < "${GITHUB_WORKSPACE}/.patch"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "check"
        [ -n "$(find . -name "*.gz" | head -1)" ] && echo "::set-output name=status::success"
        [ -n "$(find . -name "*.img" | head -1)" ] && echo "::set-output name=status::success"
        echo "check2"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "[本次编译的Actions页面](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*.gz
          ${{ env.FIRMWARE }}/sha256sums

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 20
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check cancelled
      if: cancelled()
      run: |
        touch cancelled.flag

    - name: TG Message
      if: env.SERVERCHAN_SCKEY == 'true' && !cancelled() || cancelled()
      run: |
        COMPILE_STATUS=${{ steps.tag.outputs.status }}
        echo "${{ env.BUILD_TAG }}固件编译结束" > tgmsg.txt
        if [ -e cancelled.flag ]; then
          echo "编译结果: 🟡被取消" >> tgmsg.txt
        else
          echo "编译结果: `[ $COMPILE_STATUS = 'success' ] && echo '🟢成功' || echo '🔴失败'`" >> tgmsg.txt
          echo "[Github Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.release_tag }})" >> tgmsg.txt
          cat release.txt >> tgmsg.txt
        fi
        TG_SEND_TXT=`cat tgmsg.txt`
        echo $TG_SEND_TXT
        curl -k -d chat_id=${{ secrets.TGID }} -d text="$TG_SEND_TXT" -d parse_mode=MarkdownV2 -d reply_to_message_id="${{ env.MESSAGE_ID }}" "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage"
